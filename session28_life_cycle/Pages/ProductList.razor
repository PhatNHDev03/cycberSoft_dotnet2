@page "/Products"
@inject ProductService ProductService
<h1 class="text-primary">Product list</h1>
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="search product">
    <button class="btn btn-primary">Search</button>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading...</p>
    </div>
}
else if (products.Count == 0)
{
    <p>no products founded</p>

}
else
{
    <div class="row row-cols-3">
        @foreach (var product in displayProducts)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <img class="card-img-top" src="@product.Image" alt="">
                    <div class="card-body">
                        <h4 class="card-title">@product.Name</h4>
                        <p class="card-text text-success fw-bold">@product.Price</p>
                        <p class="card-text">@product.Description</p>
                    </div>
                </div>
            </div>
        }
    </div>
}
@* Phân trang *@
<div class="mt-4 d-flex justify-content-center">

    <button class="btn btn-primary" disabled="@(currentPage <= 1)" @onclick="PreviousPage">Prev</button>

    <span>Page @currentPage/@totalpages()</span>
    @if (currentPage < totalpages())
    {
        <button class="btn btn-primary" @onclick="NextPage">Next</button>
    }
</div>


@code {
    private List<Product> products = new List<Product>();
    @* tạo 1 biến product đẻ phân trang *@
    private List<Product> displayProducts = new List<Product>();
    private bool isLoading = true;
    private string searchQuery = ""; // bien luu tru gia stri search
    private int currentPage = 1;
    private int pagesize = 6; // show 1 list co nhieu hinh do` thi nen de so chan~
    private int totalpages() => (int)Math.Ceiling((double)products.Count / pagesize);


    @* dung ham OnIntializedAsync de call api *@
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        try
        {
            products = await ProductService.GetProductsAsync();
            // displayProducts = products.Skip((currentPage - 1) * pagesize).Take(pagesize).ToList();
            isLoading = false;

            @* //cap nhat ui ==> rendẻ dữ liệu lại màn hình component (của blazor)
            StateHasChanged(); // ham này mình tcontroll được còn có hàm auto nauwx mà khó còn controll *@
            updateDisplayProduct();


        }
        catch (Exception exception)
        {
            Console.WriteLine("Error: " + exception);
        }
    }
    private void NextPage()
    {
        if (currentPage < totalpages())
        {
            currentPage++;
            updateDisplayProduct();

        }
    }
    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            updateDisplayProduct();
        }
    }

    private void updateDisplayProduct()
    {
        displayProducts = products.Skip((currentPage - 1) * pagesize).Take(pagesize).ToList();
        StateHasChanged();
    }
}